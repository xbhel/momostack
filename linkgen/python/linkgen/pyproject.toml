[project]
name = "linkgen"
version = "1.0.0"
requires-python = ">=3.12"
description = "The linkgen system is designed to automatically detect and validate references within documents."
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "xbhel", email = "xbhel@outlook.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Text Processing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pyahocorasick>=2.2.0,<3.0.0",
    "urllib3>=1.26.15,<3.0.0",
]

[dependency-groups]
dev = [
    "mypy>=1.17.0",
    "coverage>=7.6.12",
    "psutil>=7.1.0",
    "pytest>=8.0.0",
    "ruff>=0.8.0",
    "types-psutil>=7.0.0",
    "types-urllib3>=1.26.15",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["error"]


[tool.doc8]
ignore = ["D001"]


[tool.ruff]
src = ["src", "tests"]
fix = true
line-length = 88
show-fixes = true

[tool.ruff.format]
quote-style = "double"
# docstring-code-format = true
# docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle errors
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FLY",   # flynt
    "FURB",  # refurb
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INT",   # flake8-gettext
    "ISC",   # implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "PERF",  # perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific lints
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "TCH",   # flake8-type-checking
    "TID",   # ban relative imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "YTT",   # flake8-2020
]

ignore = [
    "ANN101", # missing type annotation for 'self' in method
    "ANN102", # missing type annotation for 'cls' in method
    "B028",   # No explicit `stacklevel` keyword argument found
    "COM812", # ignore when using ruff-format
    "G004",   # Logging statement uses f-string
    "ISC001", # ignore when using ruff-format
    "N818",   # Exception name should be named with an Error suffix
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "S404",   # `subprocess` module is possibly insecure
    "EM101",  # Flags string literals directly in exceptions
    "EM102",  # Flags f-string literals used in exception constructors
    "TRY003", # Checks for long exception messages that are not defined in the exception class itself.
]

exclude = ["tests/**"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D104", # Missing docstring in public package
    "D200", # One-line docstring should fit on one line with quotes
    "S101", # use of assert
    "S603", # `subprocess` call: check for execution of untrusted input"
    "S106", # Possible hardcoded password assigned to argument: "password"
    "S108", # Probable insecure usage of temporary file or directory: "/tmp"
]


[tool.mypy]
strict = true
pretty = true
show_error_codes = true
warn_unreachable = false
no_implicit_reexport = true
files = ["src", "tests"]
exclude = "(?x)(/hooks/ | tests/test-output-folder/)"
plugins = []

[[tool.mypy.overrides]]
module = ["tests.*"]
disable_error_code = ["no-untyped-def"]


[tool.coverage.run]
branch = true
source = ["src", "tests"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
exclude_also = ["if t.TYPE_CHECKING", "raise NotImplementedError", ": \\.{3}"]
